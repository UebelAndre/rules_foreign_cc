load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("//foreign_cc/built_tools:cmake_build.bzl", "cmake_tool")
load("//foreign_cc/built_tools:make_build.bzl", "make_tool")
load("//foreign_cc/built_tools:ninja_build.bzl", "ninja_tool")
load("//toolchains/native_tools:native_tools_toolchain.bzl", "native_tool_toolchain")

package(default_visibility = ["//visibility:public"])

# TODO: This should not be necessary but there appears to be some inconsistent
# behavior with the use of `constraint_value`s in `select` statements. A support
# thread was started at the end of https://github.com/bazelbuild/bazel/pull/12071
# Once it is possible to replace `:windows` with `@platforms//os:windows` that
# should be done for this file. Note actioning on this will set the minimum
# supported version of Bazel to 4.0.0 for these toolchains.
config_setting(
    name = "windows",
    constraint_values = ["@platforms//os:windows"],
    visibility = ["//visibility:public"],
)

toolchain_type(
    name = "cmake_toolchain",
)

toolchain_type(
    name = "ninja_toolchain",
)

toolchain_type(
    name = "make_toolchain",
)

toolchain(
    name = "built_cmake_toolchain",
    toolchain = ":built_cmake",
    toolchain_type = ":cmake_toolchain",
)

toolchain(
    name = "built_ninja_toolchain",
    toolchain = ":built_ninja",
    toolchain_type = ":ninja_toolchain",
)

toolchain(
    name = "built_make_toolchain",
    toolchain = ":built_make",
    toolchain_type = ":make_toolchain",
)

# Preinstalled cmake will always be the default, if toolchain with more exact constraints
# is not defined before; registered from workspace_definitions.bzl#rules_foreign_cc_dependencies
toolchain(
    name = "preinstalled_cmake_toolchain",
    toolchain = ":preinstalled_cmake",
    toolchain_type = ":cmake_toolchain",
)

# Preinstalled ninja will always be the default, if toolchain with more exact constraints
# is not defined before; registered from workspace_definitions.bzl#rules_foreign_cc_dependencies
toolchain(
    name = "preinstalled_ninja_toolchain",
    toolchain = ":preinstalled_ninja",
    toolchain_type = ":ninja_toolchain",
)

# Preinstalled make will always be the default, if toolchain with more exact constraints
# is not defined before; registered from workspace_definitions.bzl#rules_foreign_cc_dependencies
toolchain(
    name = "preinstalled_make_toolchain",
    toolchain = ":preinstalled_make",
    toolchain_type = ":make_toolchain",
)

native_tool_toolchain(
    name = "preinstalled_make",
    path = select({
        ":windows": "make.exe",
        "//conditions:default": "make",
    }),
)

make_tool(
    name = "make_tool",
    srcs = "@gnumake_src//:all_srcs",
    tags = ["manual"],
)

native_tool_toolchain(
    name = "built_make",
    path = select({
        ":windows": "$(execpath :make_tool)/bin/make.exe",
        "//conditions:default": "$(execpath :make_tool)/bin/make",
    }),
    target = ":make_tool",
)

native_tool_toolchain(
    name = "preinstalled_cmake",
    path = select({
        ":windows": "cmake.exe",
        "//conditions:default": "cmake",
    }),
)

cmake_tool(
    name = "cmake_tool",
    srcs = "@cmake_src//:all_srcs",
    tags = ["manual"],
)

native_tool_toolchain(
    name = "built_cmake",
    path = select({
        ":windows": "$(execpath :cmake_tool)/bin/cmake.exe",
        "//conditions:default": "$(execpath :cmake_tool)/bin/cmake",
    }),
    target = ":cmake_tool",
)

native_tool_toolchain(
    name = "preinstalled_ninja",
    path = select({
        ":windows": "ninja.exe",
        "//conditions:default": "ninja",
    }),
)

ninja_tool(
    name = "ninja_tool",
    srcs = "@ninja_build_src//:all_srcs",
    tags = ["manual"],
)

native_tool_toolchain(
    name = "built_ninja",
    path = select({
        ":windows": "$(execpath :ninja_tool)/bin/ninja.exe",
        "//conditions:default": "$(execpath :ninja_tool)/bin/ninja",
    }),
    target = ":ninja_tool",
)

bzl_library(
    name = "bzl_srcs",
    srcs = glob(["**/*.bzl"]),
    visibility = ["//:__subpackages__"],
    deps = [
        "//toolchains/native_tools:bzl_srcs",
    ],
)
